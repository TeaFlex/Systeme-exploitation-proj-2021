# Source : https://www.geodose.com/2021/06/golden-section-search-python-application-example.html

import numpy as np
import matplotlib.pyplot as plt
from IPython.display import clear_output

def check_pos(x1,x2):
    if x2<x1:
        label='right'
    else:
        label=''
    return label

def update_interior(xl,xu):
    d=((np.sqrt(5)-1)/2)*(xu-xl)
    x1=xl+d
    x2=xu-d
    return x1,x2

def find_max(y,xl,xu,x1,x2,label):
    fx1=y(x1)
    fx2=y(x2)
    if fx2>fx1 and label=='right':
        xl=xl
        xu=x1
        new_x=update_interior(xl,xu)
        x1=new_x[0]
        x2=new_x[1]
        xopt=x2
    else:
        xl=x2
        xu=xu
        new_x=update_interior(xl,xu)
        x1=new_x[0]
        x2=new_x[1]
        xopt=x1
    return xl,xu,xopt

def plot_graph(x,y,xl,xu,x1,x2):
    clear_output(wait=True)
    
    #plot sinus graph
    plt.plot(x,y(x))
    
    #plot x1 point
    plt.plot(x1,y(x1),'ro',label='x1')
    plt.plot([x1,x1],[0,y(x1)],'k')
    
    #plot x2 point
    plt.plot(x2,y(x2),'bo',label='x2')
    plt.plot([x2,x2],[0,y(x2)],'k')
    
    #plot xl line
    plt.plot([xl,xl],[0,y(xl)])
    plt.annotate('xl',xy=(xl-0.01,-0.2))
        
    #plot xu line
    plt.plot([xu,xu],[0,y(xu)])
    plt.annotate('xu',xy=(xu-0.01,-0.2))
        
    #plot x1 line
    plt.plot([x1,x1],[0,y(x1)],'k')
    plt.annotate('x1',xy=(x1-0.01,-0.2))
        
    #plot x2 line
    plt.plot([x2,x2],[0,y(x2)],'k')
    plt.annotate('x2',xy=(x2-0.01,-0.2))
    
    #y-axis limit
    #plt.ylim([-1.2,1.2])
    plt.show()

def golden_search(x,y,xl,xu,et):
    it=0
    e=1
    while e>=et:
        new_x=update_interior(xl,xu)
        x1=new_x[0]
        x2=new_x[1]
        fx1=y(x1)
        fx2=y(x2)
        label=check_pos(x1,x2)
        clear_output(wait=True)
        
        new_boundary=find_max(y,xl,xu,x1,x2,label)
        
        xl=new_boundary[0]
        xu=new_boundary[1]
        xopt=new_boundary[2]
        
        it+=1
        r=(np.sqrt(5)-1)/2 #GOLDEN RATIO
        e=((1-r)*(abs((xu-xl)/xopt)))*100 #Error  
        
    # /!\ ERREUR SI FONCTION DE TYPE y = constante
    #plot_graph(x,y,xl,xu,x1,x2) #PLOTTING
    #plt.show()
    return (x1+x2)/2
 
 
'''
def f():
    start = -7
    end =6
    x=np.linspace(start,end,100)
    
    
    def y(x):
        fx=2*x**2 + x + 1
        return fx
    

    #EXECUTING GOLDEN SEARCH FUNCTION
    golden_search(x,y,start,end,0.05)
'''