import numpy as np
import matplotlib.pyplot as plt
from sympy.core.sympify import sympify
from utils.derivate import derivate
from utils.func_max import golden_search
from sympy import Symbol,sympify
from sympy.utilities.lambdify import lambdify

# Fonction de calcul d'intégral par la méthode de Simpson
# f : fonction "Sympify" à intégrer
# a : borne d'intégration inférieure
# b : borne d'intégration supérieure
# n : nombre de sous-intervalles d'intégration
def simpson(exp,a,b,n):
    # Définiton fonction
    x = Symbol("x")
    f = lambdify(x,exp)
    
    # Définiton des 3 points de Simpson
    f0 = f(a)
    f1 = f((a+b)/2)
    f2 = f(b)
    
    # Calcul de l'intégrale approchée
    i = (b-a)*(f0+4*f1+f2)/6
    
    # Calcul de l'erreur
    derivExp = derivate(exp,4) # Obtention de la dérivée 4ème de la fonction
    deriv = lambdify(x,derivExp) # Définition de la dérivée 4ème
    xl = np.linspace(a,b,100) # Intervalles sur lesquels le maximum va être déterminé
    err = golden_search(xl,deriv,a,b,0.05) # Maximum de la dérivée 4ème de la fonction
    
    # Représentation graphique
    
    # Fonction de base
    plt.plot(xl,f(xl))
    
    # 3 points
    plt.plot(a,f0,'ko')
    plt.annotate('f0',xy=(a,f0))
    
             
    #plt.plot((a+b)/2,f1,'ro',label='x1')
    
    #plt.plot(b,f2,'ro',label='x1')
    
    plt.show()
    
    print(f'Valeur de l\'intégrale approchée : {i} +/- {err}')
    

simpson(sympify("sin(x)"),0,10,1)

