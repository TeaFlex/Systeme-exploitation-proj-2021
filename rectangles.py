#choisir un nombre d'intervalles
#calculer la largeur des rectangles : l = (b - a)/nombre intervalles
#début boucle de ( 0 à (nbr rectangles + 1) )
    #calculer la hauteur des rectangles : H = y(a+n*l)
    #remplir un tableau (array) avec les hauteurs
    #miltiplier les hauteurs par la largeur l : aire = H*l
    #faire la smme des aires : integrale += aire
    #remattre aire à 0
#fermer boucle
#donner la valeur de integrale


import numpy as np
from numpy.core import machar
from sympy import *
from sympy.polys.polyoptions import Symbols
from sympy.utilities.lambdify import lambdify
import matplotlib.pyplot as plt


def rectangles_methode(exp, a, b,m):
    
    symb = Symbol("x")
    funct = lambdify(symb,exp)
    #print(symb)
    borne_a = a
    borne_b = b

    print(borne_a)
    print(borne_b)

    #calcul de la largeur des rectangles
    largeur = (borne_b - borne_a)/(m)
    print(largeur)
    #calcul de la hauteur des rectangles
    tab_hauteurs = np.arange(m+1)
    print(tab_hauteurs)
    tab_multi = np.arange(m+1) 
    tab_hauteurs = funct(a + (tab_multi*largeur))
    print(tab_hauteurs)


    
    integrale = (tab_hauteurs * largeur)
    print(integrale)
    total = 0
    total = integrale.sum(axis = 0)
    print(total)


    #calcul de l'erreur
    erreur = 0
    grand_intervalle = (borne_b - borne_a)
    print(grand_intervalle)

    # Calcul du maximum sur la dérivée première
    derivExp = diff(exp,symb) # Obtention de la dérivée 1ère de la fonction
    deriv = lambdify(symb,derivExp) # Définition de la dérivée 1ère
    xl = np.linspace(a,b,100) # Intervalles sur lesquels le maximum va être déterminé
    ymax = np.amax(abs(deriv(xl))) # Maximum de la dérivée 1ère

    #val_abs_max_of_prime_derivation = abs(max_of_prime_derivation)
    erreur = ((np.power(grand_intervalle,2))/(2 * m)) * ymax
    print(erreur)
    print(max)

    #affichage des rectangles
    x = np.linspace(a, b, m)
    y = exp
    for i in range(m-1):
        # dessin du rectangle
        x_rect = [x[a+(i*largeur)], x[a+(i*largeur)], x[a+((i*largeur)+1)], x[a+((i*largeur)+1)], x[a+(i*largeur)]] # abscisses des sommets
        y_rect = [0   , y[a+(i*largeur)], y[a+((i*largeur)+1)]  , 0     , 0   ] # ordonnees des sommets
        #x_rect = [x[i], x[i], x[i+1], x[i+1], x[i]] # abscisses des sommets
        #y_rect = [0   , y[i], y[i]  , 0     , 0   ] # ordonnees des sommets
        plt.plot(x_rect, y_rect,"r")
    
    


