import numpy as np
import matplotlib.pyplot as plt
from sympy import lambdify, abc
from utils.derivate import derivate

def middlepoint(a: int, b: int, funcExp):
    """
    Fonction d'intégration numérique utilisant la méthode du point milieu.
    Cette fonction calcule la valeur rapprochée de l'intégration,
    le taux d'erreur et la valeur (plus ou moins) exacte de l'intégration d'une expression donnée.
    Les représentations graphiques de l'expression et du résultat de son intégration sont aussi données.

    Paramètres
    ==========

    `a` (entier): Première borne d'intégration.
    `b` (entier): Seconde borne d'intégration.
    `funcExp` (expression Sympy): Expression mathématiques analysée par Sympy.
    """

    func = lambdify(abc.x, funcExp) # Fonction lambda de l'expression (utilisable par python)
    derivsec = derivate(funcExp, 2) # Dérivation seconde de l'expression
    derivsecfunc = lambdify(abc.x, derivsec) # Fonction lambda de l'expression dérivée

    # Point milieu
    xm = (a+b)/2
    ym = func(xm)

    # Hauteur du rectangle
    h = b-a

    # Points de la fonction
    x = np.linspace(a, b, 100)
    y = func(x)
    if(funcExp.is_constant()): # Correction du problème de dimension en cas d'expression constante
        y = np.full(x.shape, func(x))

    # Calcul de l'erreur
    yderiv = np.amax(derivsecfunc(x))
    e = ((h**3)/3)*yderiv

    # Calcul de l'intégrale rapprochée
    approx = ym*h
    result = e + approx
    print(f"\nCalcul par méthode du point milieu:")
    print(f"Expression: f(x)={funcExp}")
    print(f"Erreur: {e}\tValeur rapprochée (sans erreur): {approx}")
    print(f"Milieu: {(xm, ym)}\tRésultat (avec erreur): {result}\n")
    
    # Affichage des résultats
    
    plt.plot(x, y, color='black') # Graphique de f(x)
    
    plt.axhline(ym, color='black', ls="--", alpha=0.5) # Borne supérieure du rectangle
    plt.fill_between(x, ym, color="gray", alpha=0.5)

    plt.plot([xm, xm], [ym, 0], 'k-', ls='--', alpha=0.5, color='black') # Hauteur du rectangle

    plt.scatter(xm, ym, color='black') # Point milieu
    plt.annotate("f0", xy=(xm, ym))
    plt.scatter(xm, 0, color='black')  # Milieu axe x
    plt.annotate("x0", xy=(xm, 0))

    plt.grid()
    plt.show()
