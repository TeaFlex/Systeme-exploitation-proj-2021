import numpy as np
import matplotlib.pyplot as plt
from sympy import lambdify, abc
from utils.derivate import derivate

def middlepoint(a, b, funcExp):

    func = lambdify(abc.x, funcExp)
    derivsec = derivate(funcExp, 2)
    derivsecfunc = lambdify(abc.x, derivsec)

    # Point milieu
    xm = (a+b)/2
    ym = func(xm)
    h = b-a

    # Points de la fonction
    x = np.linspace(a, b, 100)
    y = func(x)

    # Calcul de l'erreur
    yderiv = np.amax(derivsecfunc(x))
    e = ((h**3)/3)*yderiv

    # Calcul de l'intégrale rapprochée
    approx = ym*h
    result = e + approx
    print(f"function expression: f(x)={funcExp}")
    print(f"double derivation: {derivsec}")
    print(f"error rate: {e}, approximate value: {approx}")
    print(f"middle: {(xm, ym)} result: {result}")
    
    # Affichage des résultats
    plt.figure(figsize= (10, 10))
    plt.plot(x, y)
    plt.fill_between(x, ym, color="#00FF00", alpha=0.1)
    plt.axhline(ym, color='r', ls="--", alpha=0.5)
    plt.plot([xm, xm], [ym, 0], 'k-', ls='--', alpha=0.5, color='r')
    plt.scatter(xm, ym)
    plt.scatter(xm, 0)
    plt.show()
