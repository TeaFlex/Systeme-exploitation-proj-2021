import numpy as np
import matplotlib.pyplot as plt
from sympy import diff, exp, lambdify, sympify
from sympy.abc import x as xSymbol

def middlepoint(a, b, function):

    # Point milieu
    xm = (a+b)/2
    ym = function(xm)
    h = b-a

    # Points de la fonction
    x = np.linspace(a, b, 100)
    y = function(x)

    # Calcul de l'intégrale rapprochée
    result = ym*h
    print(f"middle: {(xm, ym)} result: {result}")

    # Calcul de l'erreur
    # e = (h**3)/24
    # xsym = Symbol('x')
    
    # yderiv = deriv(3)
    # deriv = lambdify(xSymbol, diff(sympExp, xSymbol))
    

    # Affichage des résultats
    plt.figure(figsize= (10, 10))
    plt.plot(x, y)
    plt.fill_between(x, ym, color="#00FF00", alpha=0.1)
    plt.axhline(ym, color='r', ls="--", alpha=0.5)
    plt.plot([xm, xm], [ym, 0], 'k-', ls='--', alpha=0.5, color='r')
    plt.scatter(xm, ym)
    plt.scatter(xm, 0)
    plt.show()

if(__name__ == "__main__"):
    middlepoint(0, 5, lambdify(xSymbol, "x+1"))
