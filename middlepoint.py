import numpy as np
import matplotlib.pyplot as plt
from sympy import lambdify, abc
from utils.derivate import derivate

def middlepoint(a: int, b: int, funcExp):
    """
    Fonction d'intégration numérique utilisant la méthode du point milieu.
    Cette fonction calcule la valeur rapprochée de l'intégration,
    le taux d'erreur et la valeur (plus ou moins) exacte de l'intégration d'une expression donnée.
    Les représentations graphiques de l'expression et du résultat de son intégration sont aussi données.

    Paramètres
    ==========

    `a` (entier): Première borne d'intégration.
    `b` (entier): Seconde borne d'intégration.
    `funcExp` (expression Sympy): Expression mathématiques analysée par Sympy.
    """

    func = lambdify(abc.x, funcExp)
    derivsec = derivate(funcExp, 2)
    derivsecfunc = lambdify(abc.x, derivsec)

    # Point milieu
    xm = (a+b)/2
    ym = func(xm)
    h = b-a

    # Points de la fonction
    x = np.linspace(a, b, 100)
    y = func(x)

    # Calcul de l'erreur
    yderiv = np.amax(derivsecfunc(x))
    e = ((h**3)/3)*yderiv

    # Calcul de l'intégrale rapprochée
    approx = ym*h
    result = e + approx
    print(f"Expression: f(x)={funcExp}")
    #print(f"double derivation: {derivsec}")
    print(f"Erreur: {e}\tValeur rapprochée: {approx}")
    print(f"Milieu: {(xm, ym)}\tRésultat: {result}")
    
    # Affichage des résultats
    plt.figure(figsize= (10, 10))
    plt.plot(x, y)
    plt.fill_between(x, ym, color="#00FF00", alpha=0.1)
    plt.axhline(ym, color='r', ls="--", alpha=0.5)
    plt.plot([xm, xm], [ym, 0], 'k-', ls='--', alpha=0.5, color='r')
    plt.scatter(xm, ym)
    plt.scatter(xm, 0)
    plt.show()
