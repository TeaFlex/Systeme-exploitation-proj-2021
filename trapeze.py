# définir fonction
# définir A et B les bornes
# définir un nbre d'intervalle entier
# calculer la largeur des trapèzes : l= (b-a)/nbr intervalles
# début boucle de 0 à nbr de trapèzes + 1
#   calculer H trapèze
#   remplir tableau avec les hauteurs
#   faire sum aires
#   remettre aire = 0
# fin boucle
# donner val intégrale


#import numpy as np
#from numpy.core import machar
#from sympy import *
#from sympy.utilities.lambdify import lambdify
#import matplotlib.pyplot as plt

import numpy as np
import matplotlib.pyplot as plt
from sympy.core.sympify import sympify
from utils.derivate import derivate
from sympy import Symbol,sympify
from sympy.utilities.lambdify import lambdify


def trapeze_methode(exp, a, b, m):

    symbole = Symbol("x")
    function = lambdify(symbole,exp)
    print("symbole = ")
    print(symbole)
    borne_a = a
    borne_b = b
    
    # bornes = X sur graphique
    print("borne a = ")
    print(borne_a)
    
    print("borne b =")
    print(borne_b)
    
    #calcul de la largeur des trapèzes
    largeur = (borne_b - borne_a)/(m)
    print("largeur du trapèze = ")
    print(largeur)
    
    #calcul hauteur petite base         hauteur = Y sur graphique
    tab_hauteurs = np.arange(m+1)
    print(tab_hauteurs)
    
#    tab_multi = np.arange(m+1) 
    tab_multi = np.arange(m)
    tab_hauteurs = function(a + (tab_multi*largeur))
    print(tab_hauteurs)
    
    integrale = (largeur/2)*(tab_hauteurs + tab_hauteurs+1)
    print("Valeur par la méthode de Trapèze : ")
    print(integrale)
    
    total = 0
    total = integrale.sum(axis = 0)
    print("La valeur totale = ")
    print(total)
    
    #calcul de l'erreur
    erreur = 0
    gd_intervalle = borne_b - borne_a
    print("grand intervalle =")
    print(gd_intervalle)
    
# Jusqu'ici c'est good
    
    
    # Calcul du maximum sur la dérivée première
    derivExp = derivate(exp,2) # Obtention de la dérivée 2nd de la fonction
    deriv = lambdify(symbole,derivExp) # Définition de la dérivée 2nd
    xl = np.linspace(a,b,100) # Intervalles sur lesquels le maximum va être déterminé
    ymax = np.amax(abs(deriv(xl))) # Maximum de la dérivée 2nd

    #val_abs_max_of_prime_derivation = abs(max_of_prime_derivation)
    erreur = ((np.power(gd_intervalle,2))/(2 * m)) * ymax
    print("L'erreur =")
    print(erreur)
    print(max)
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
#------------------------------------    
#    nbr_intervalle = int(input("Entrez le nombre d'intervalle que vous souhaitez : "))
#    largeur = (b - a)/nbr_intervalle
    
    # affiche la largeur du trapeze
#    print("largeur = " )
#    print(largeur)
    
#    petite_base = np.arange(nbr_intervalle)
#    grande_base = np.arange(nbr_intervalle)
    
    
    #tab_hauteur = np.arange(nbr_intervalle+1)
#    print(petite_base)
#    print(grande_base)
   
    
   
    
   #tab_multi= np.arange((largeur/2)*(tab_hauteur + tab_hauteur+1))
    
    
    
    
#    print("Valeur par la méthode de Trapèze : ")
    
    
