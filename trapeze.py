import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from sympy.core.sympify import sympify
from utils.derivate import derivate
from sympy import Symbol,sympify
from sympy.utilities.lambdify import lambdify


def trapeze_methode(exp, a, b, m, l):

    l.acquire()
    try:
        symbole = Symbol("x")
        function = lambdify(symbole,exp)
        borne_a = a
        borne_b = b
        largeur = (borne_b - borne_a)/(m)
        print("largeur du trapèze = ", largeur)
        #calcul de la largeur des trapèzes
        
        
        #calcul hauteur petite base         hauteur = Y sur graphique
        tab_hauteurs = np.arange(m+1)
        tab_multi = np.arange(m)
        tab_hauteurs = function(a + (tab_multi*largeur))
        
        #Calcul de l'intégrale
        integrale = (largeur/2)*(tab_hauteurs + tab_hauteurs+1) #Calcul la surface de chaque trapèze sous la courbe
        total = 0
        total = integrale.sum(axis = 0)                         #addition de toutes les surfaces 
        print("La valeur totale = ", total)

        
        #calcul de l'erreur
        erreur = 0
        gd_intervalle = borne_b - borne_a
        
        #Calcul du maximum sur la dérivée première
        derivExp = derivate(exp,2) # Obtention de la dérivée 2nd de la fonction
        deriv = lambdify(symbole,derivExp) # Définition de la dérivée 2nd
        xl = np.linspace(a,b,100) # Intervalles sur lesquels le maximum va être déterminé
        ymax = np.amax(abs(deriv(xl))) # Maximum de la dérivée 2nd

        #Formule de l'erreur
        erreur = ((np.power(gd_intervalle,3))/(np.power(12*m,2)))*ymax
        print("L'erreur =", erreur)
        
        #Nom du graphique
        plt.title("Méthode trapèze")
        print("maximum de la dérivée seconde =", ymax)

        #Affichage courbe
        abssisses = np.linspace(a,b,100)
        plt.plot(abssisses,function(abssisses), 'red')
        plt.grid()
        
        #affichage trapèzes sous la courbe
        axes = plt.gca()
        for i in range(m):
            #Pour afficher un trapèze, il faut 4 points x,y
            points = [ [borne_a + (i*largeur)   , 0],
                    [borne_a + (i*largeur)   , function(borne_a+(i*largeur))],
                    [borne_a+((i+1)*largeur) , function(borne_a+((i+1)*largeur))],
                    [borne_a+((i+1)*largeur) , 0] ]
            axes.add_artist(patches.Polygon(xy=points, edgecolor = 'black',fill = False, linestyle = 'dashed',linewidth = 1.5, zorder = 1.5))

        plt.grid()
        plt.show()   
        #Normalement c'est bon ici
    finally:
        l.release()
        plt.show()